#############################################################################
#
# 0. Ogolnie
#

W tym przykladzie pokazana jest struktura plikow konfiguracyjnych
dla pakietu instalacyjnego tworzacego program i biblioteke dynamicznie
konsolidowana.

Podstawowe cechy budowy pakietu:

 - pliki naglowkowe sa w innym katalogu niz pliki zrodlowe,
 - sprawdzane jest istnienie w systemie biblioteki xerces-c (patrz ./configure.ac)
 - sprawdzane jest czy nalezy program konsolidowac z osobna biblioteka dl,
   czy tez funkcje dlopen, dlsym itp. dostepne sa w bibliotece systemowej.
 - tworzona jest biblioteka dynamicznie ladowalna libtool.so 



#############################################################################
#
# 1. Drzewo plikow dla tego przykladu
#

 *
 |
 +- README 
 |
 +- Makefile.am
 |
 +- configure.ac
 |
 +- inc/ -+- Makefile.am
 |        |
 |        +- modul1.hh
 |        |
 |        +- modul2.hh
 |
 +- src/ -+- Makefile.am
 |        |
 |        +- main.cpp
 |        |
 |        +- modul1.cpp
 |        |
 |        +- modul2.cpp
 |
 +- src-lib/ -+- Makefile.am
              |
              +- tool.cpp


#############################################################################
#
# 2. Tworzenie pakietu instalacyjnego
#

 Aby utworzyc pakiet instalacyjny nalez przejsc do katalogu dostarczonego 
 przykladu i wykonac nasptepujace operacje:


1.  libtoolize

    - tworzy pomocnicze makra i skryptu dla libtool, narzedzia, ktore
      wykorzystywane jest do budowy bibliotek dynamicznie konsolidowanych.

2.   autoreconf --install

    - powoduje zainstalowanie niezbednych skryptow oraz utworzenie
      plikow Makefile.in

3.   ./configure

    - powoduje utworzenie plikow Makefile

4.   make

    -  powoduje przeprowadzenie kompilacji.  W jej wyniku w katalogu
       src/ znadzie sie wlasciwy program src/interp4robotface.

5.  make distcheck

    - umozliwia sprawdzenie czy mozna utworzyc wlasciwy pakiet instalacyjny.
      Jezeli wszystko jest dobrze, to ...

================================================
interp4robotface-1.0 archives ready for distribution: 
interp4robotface-1.0.tar.gz
================================================


6.  make dist

    - tworzy wlasciwy pakiet instalacyjny interp4robotface-1.0.tar.gz


#############################################################################
#
# 3. Drzewo plikow dla tego przykladu
#


Schemat probnej instalacji pakietu:

    tar -xzf interp4robotface-1.0.tar.gz
    cd interp4robotface-1.0
    ./configure --prefix=${HOME}/test
    make
    make install

 Dla testu mozna uruchomic program:
   ~/test/bin/interp4robotface

 UWAGA: Program chociaz laduje biblioteke w trakcie swojego dzialania,
        to jednak nie wymaga dodatkowego ustawienie zmiennej srodowiskowej
        LD_LIBRARY_PATH  (Dlaczego tak jest?)

#############################################################################
#
# 4. Tworzenie wlasnego pakietu na podstawie dostarczonego przykladu
#

 0. Najpier nalezy wykonac polecenie:
      make clean

 1. Nalezy do podkartoteki src/ przekopiowac pliki zrodlowe programu.

 2. W pliku src/Makefile.am nalezy dopisac zrodla wlasnych modulow
    (Uwaga: nalezy pamietac o znaku kontynuacji linii, jesli nazwy sa pisane
     w kilku liniach) i usnac nazwy przykladowych modulow: 
                                         main.cpp, module1.cpp, module2.cpp.

 3. Do podkartoteki inc/ nalezy przekopiowac pliki naglowkowe programu
    i biblioteki implementujace polecenie turn90.

 4. W pliku inc/Makefile.am nalezy dopisac nazwy plikow naglowkowych 
    i usunac nazwy przykladow: module1.hh i module2.hh

 5. Do podkartoteki src-lib/ nalezy przekopiowac pliku zrodlowe biblioteki.

 6. W pliku inc/Makefile.am, tak jak to juz bylo robione wczesniej nalezy
    dopisac zrodla biblioteki i usunac nazwe przykladowej biblioteki.

 7. Nalezy zamienic nazwe tool na turn90 we wszystkich jej wystapinieach.
