// Generated by gencpp from file drrobot_jaguar4x4_player/IMUInfo.msg
// DO NOT EDIT!


#ifndef DRROBOT_JAGUAR4X4_PLAYER_MESSAGE_IMUINFO_H
#define DRROBOT_JAGUAR4X4_PLAYER_MESSAGE_IMUINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace drrobot_jaguar4x4_player
{
template <class ContainerAllocator>
struct IMUInfo_
{
  typedef IMUInfo_<ContainerAllocator> Type;

  IMUInfo_()
    : header()
    , accelRawData()
    , gyroRawData()
    , magRawData()
    , accelReading()
    , gyroReading()  {
      accelRawData.assign(0);

      gyroRawData.assign(0);

      magRawData.assign(0);

      accelReading.assign(0.0);

      gyroReading.assign(0.0);
  }
  IMUInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , accelRawData()
    , gyroRawData()
    , magRawData()
    , accelReading()
    , gyroReading()  {
      accelRawData.assign(0);

      gyroRawData.assign(0);

      magRawData.assign(0);

      accelReading.assign(0.0);

      gyroReading.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array<uint32_t, 3>  _accelRawData_type;
  _accelRawData_type accelRawData;

   typedef boost::array<uint32_t, 3>  _gyroRawData_type;
  _gyroRawData_type gyroRawData;

   typedef boost::array<uint32_t, 3>  _magRawData_type;
  _magRawData_type magRawData;

   typedef boost::array<float, 3>  _accelReading_type;
  _accelReading_type accelReading;

   typedef boost::array<float, 3>  _gyroReading_type;
  _gyroReading_type gyroReading;




  typedef boost::shared_ptr< ::drrobot_jaguar4x4_player::IMUInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drrobot_jaguar4x4_player::IMUInfo_<ContainerAllocator> const> ConstPtr;

}; // struct IMUInfo_

typedef ::drrobot_jaguar4x4_player::IMUInfo_<std::allocator<void> > IMUInfo;

typedef boost::shared_ptr< ::drrobot_jaguar4x4_player::IMUInfo > IMUInfoPtr;
typedef boost::shared_ptr< ::drrobot_jaguar4x4_player::IMUInfo const> IMUInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drrobot_jaguar4x4_player::IMUInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drrobot_jaguar4x4_player::IMUInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace drrobot_jaguar4x4_player

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/indigo/share/nav_msgs/cmake/../msg'], 'geographic_msgs': ['/home/perdziu/catkin_ws/src/geographic_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'drrobot_jaguar4x4_player': ['/home/perdziu/catkin_ws/src/drrobot_jaguar4x4_player/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::drrobot_jaguar4x4_player::IMUInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drrobot_jaguar4x4_player::IMUInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drrobot_jaguar4x4_player::IMUInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drrobot_jaguar4x4_player::IMUInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drrobot_jaguar4x4_player::IMUInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drrobot_jaguar4x4_player::IMUInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drrobot_jaguar4x4_player::IMUInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "701e9d1318413bd1e8936e4896f37226";
  }

  static const char* value(const ::drrobot_jaguar4x4_player::IMUInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x701e9d1318413bd1ULL;
  static const uint64_t static_value2 = 0xe8936e4896f37226ULL;
};

template<class ContainerAllocator>
struct DataType< ::drrobot_jaguar4x4_player::IMUInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drrobot_jaguar4x4_player/IMUInfo";
  }

  static const char* value(const ::drrobot_jaguar4x4_player::IMUInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drrobot_jaguar4x4_player::IMUInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# IMU Sensor information message from DrRobot Robot.\n\
\n\
Header header    	# timestamp in the header is the time the driver\n\
		 	# returned the data reading\n\
#make sure below sensors on your robot or not\n\
uint32[3] accelRawData 		#Raw accel sensor reading, 0-x, 1-y,z-2\n\
uint32[3] gyroRawData    	#Gyro raw data\n\
uint32[3] magRawData   		# magRaw\n\
float32[3] accelReading		# accel sensor reading  m/s2\n\
float32[3] gyroReading		# gyro sensor reading   rad/m\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::drrobot_jaguar4x4_player::IMUInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drrobot_jaguar4x4_player::IMUInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.accelRawData);
      stream.next(m.gyroRawData);
      stream.next(m.magRawData);
      stream.next(m.accelReading);
      stream.next(m.gyroReading);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct IMUInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drrobot_jaguar4x4_player::IMUInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drrobot_jaguar4x4_player::IMUInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "accelRawData[]" << std::endl;
    for (size_t i = 0; i < v.accelRawData.size(); ++i)
    {
      s << indent << "  accelRawData[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.accelRawData[i]);
    }
    s << indent << "gyroRawData[]" << std::endl;
    for (size_t i = 0; i < v.gyroRawData.size(); ++i)
    {
      s << indent << "  gyroRawData[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.gyroRawData[i]);
    }
    s << indent << "magRawData[]" << std::endl;
    for (size_t i = 0; i < v.magRawData.size(); ++i)
    {
      s << indent << "  magRawData[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.magRawData[i]);
    }
    s << indent << "accelReading[]" << std::endl;
    for (size_t i = 0; i < v.accelReading.size(); ++i)
    {
      s << indent << "  accelReading[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.accelReading[i]);
    }
    s << indent << "gyroReading[]" << std::endl;
    for (size_t i = 0; i < v.gyroReading.size(); ++i)
    {
      s << indent << "  gyroReading[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.gyroReading[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRROBOT_JAGUAR4X4_PLAYER_MESSAGE_IMUINFO_H
