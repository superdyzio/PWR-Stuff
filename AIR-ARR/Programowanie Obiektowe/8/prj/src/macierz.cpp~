#include "macierz.hh"

/*!
 *\file
 *\brief	Plik zawiera implementacje metod z nagłówka 'macierz.hh'.
*/
template <typename T>
ostream & operator << (ostream & wyj, Macierz<T> x) {
	for (int i = 0; i < 3; i++) {
		cout << "| ";
		for (int j = 0; j < 3; j++) {
			cout.width(5);
			cout << x(i,j) << "   ";
		}
		cout << " |" << endl;
	}
	return wyj;
}
template <typename T>
istream & operator >> (istream & wej, Macierz<T> & x) {
  	char znak;
  	for (int i = 0; i < 3; i++) {
		wej >> znak;	
		if (znak != '|') {
			wej.setstate(ios::failbit); 
			return wej;
		}
		else {
			for (int j = 0; j < 3; j++) {
				wej >> x(i,j);
				if (wej.fail()) return wej;
			}
			wej >> znak;
			if (znak != '|') {
				wej.setstate(ios::failbit); 
				return wej;
			}
		}
	}
	return wej;
}
template <typename T>
Macierz<T> Macierz<T>::operator * (Macierz<T> a) {
	Macierz<T> w;
	int k;
   	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 3; j++) {
			w(i,j) = a(i,k) * tab[k][j];
			k = 0;
			for (k = 1; k < 3; k++) {
				w(i,j) = w(i,j) + ( a(i,k) * tab[k][i] );
			}
		}
	}
	return w;
}
	
template <typename T>	
T Macierz<T>::det() {
	T wynik;
	Zeruj(wynik);
	int pom1, pom2;
	for (int i = 0; i < 3; i++) {
		pom1 = (i+1) % 3;
		pom2 = (i+2) % 3;
		wynik = wynik + ( tab[0][i] * tab[1][pom1] * tab[2][pom2] );
	}	
	for (int i = 0; i < 3; i++) {
		pom1 = (i+1) % 3;
		pom2 = (i+2) % 3;
		wynik = wynik - ( tab[0][pom2] * tab[1][pom1] * tab[2][i] );
	}
	return wynik;
} 
