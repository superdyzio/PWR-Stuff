#ifndef UKLAD_HH
#define UKLAD_HH

#include <iostream>
#include <cstdio>
#include <cctype>
#include <cstdlib>
#include <cstring>
#include <ctime>

#include "zespolone.hh"
#include "symbole.hh"
#include "liczba.hh"
#include "typ.hh"
#include "macierz.hh"
#include "wektor.hh"

using namespace std;

/*!
 *\file
 *\brief	Moduł zawierający definicję klasy Uklad wraz z przeciążeniami wybranych operatorów, np. operatory wejścia/wyjścia
 *		operator mnożenia macierzy przez wektor.
 *		W module tym zaimplementowany jest również algorytm rozwiązywania układu równań metodą Cramera.
*/
 
/*!
 *\brief	Definicja szablonu klasy Uklad. Może przyjmować typy: double, Symbol oraz Zespolona.
*/
template <typename T>
class Uklad {
public:
	/*! \brief Macierz współczynników układu równań. */
	Macierz<T> A;
	/*! \brief Rozwiązanie układu równań. */
	Wektor<T> x;
	/*! \brief Wektor wyrazów wolnych. */
	Wektor<T> b;
	/*! \brief Konstruktor dwuparametrowy. */
	Uklad<T>(Macierz<T> a, Wektor<T> c) { A = a; b = c; };
	Uklad<T>() {}
	/*!
	 *\brief	Funkcja służąca do podstawienia w miejsce wybranej kolumny macierzy wektora wyrazów wolnych, co umożliwi wyliczenia
	 *		wyznacznika i rozwiązanie układu Cramera.
	 *\param[in]	Jako argument przyjmuje numer kolumny do której ma być dokonane podstawienie.
	 *\return	Zwraca macierz z podmienioną kolumną.
	*/
	Macierz<T> ZamianaKolumny(int k);
	/*!
	 *\brief	Funkcja ma za zadanie rozwiązać układ równań Cramera.
	 *\param[in]	Jako argument funkcja przyjmuje zmienną typu Uklad.
	 *\return	Zwraca wektor będący zestawem rozwiązań układu.
	*/	
	void Rozwiaz();
};



/*!
 *\brief	Operator wejścia dla klasy Uklad.
 *\param[in]	Jako argument przyjmuje strumień wejściowy oraz zmienną do której ma zostać zapisana wczytana wartość.
 *\return	Zwraca podany jako argument strumień wejściowy.
*/


template <typename T>
istream & operator >> (istream & wej, Uklad<T> & u) {
  	wej >> u.A;
  	if (wej.fail()) return wej; 
	else {
		wej >> u.b;
		if (wej.fail()) return wej;
		else return wej;
	}
}
/*!
 *\brief	Operator wyjścia dla klasy Uklad.
 *\param[in]	Jako argument przyjmuje strumień wyjściowy oraz zmienną, której zawartość ma zostać wypisana.
 *\return	Zwraca podany jako argument strumień wyjściowy.
*/
template <typename T>
ostream & operator << (ostream & wyj, Uklad<T> u) {
	for (int i = 0; i < 3; i++) {
		wyj << "| ";
		for (int j = 0; j < 3; j++) {
			wyj.width(5);
			wyj << u.A(i,j);
		}
		wyj << "|  | X_" << i+1 << "|";
		if (i == 1) cout << " = | ";
		else wyj << "   | ";
		wyj << u.b[i] << " |" << endl;
	}
	return wyj;
}	

template <typename T>
Macierz<T> Uklad<T>::ZamianaKolumny(int k) {
	Macierz<T> pom = A;
	if ( (k > 2) || (k < 0) ) {
		cerr << "Nieprawidłowy numer kolumny. Przyjęta zostanie reszta z dzielenia podanej wartości przez 3." << endl;
		k = k % 3;
	}
	for (int i = 0; i < 3; i++) pom(i, k) = b[i];
	return pom;
}

template <typename T>
void Uklad<T>::Rozwiaz() {
	T detA;
	Macierz<T> pom;
	detA = A.det();
	for (int i = 0; i < 3; i++) {
		pom = ZamianaKolumny(i);
		this->x[i] = pom.det() / detA;
	}
}
/*!
 *\brief	Operator dwuargumentowy '*', w tym miejscu służący do mnożenia macierzy przez wektor.
 *\param[in]	Jako argumenty przyjmuje zmienną typu Macierz oraz drugą typu Wektor.
 *\return	Zwraca wynik mnożenia Macierz X Wektor.
*/
template <typename T>		
Wektor<T> operator * (Macierz<T> m, Wektor<T> w) {
	Wektor<T> wynik;
	wynik.Zero();
	for (int i = 0; i < 3; i++) 
		for (int j = 0; j < 3; j++)
			wynik[i] = wynik[i] + ( m(i,j) * w[j] );
  	return wynik;
}
/*!
 *\brief	Funkcja wyliczająca błąd wyliczenia rozwiązania układu równań.
 *\param[in]	Jako argument przyjmuje zmienną przechowującą układ równań.
 *\return	Zwraca wektor wskazujący wartość błędu wyliczenia rozwiązania dla każdego z elementów rozwiązania.
*/
template <typename T>
Wektor<T> Blad(Uklad<T> u) {
	return u.A * u.x - u.b;
}
#endif
