1)
	let is_prime n =
    		let n = max n (-n) in
    			let rec is_not_divisor d =
      				d * d > n || (n mod d <> 0 && is_not_divisor (d+1)) in
    		is_not_divisor 2

  	let rec all_primes a b =
    		if a > b then [] else
      		let rest = all_primes (a + 1) b in
      			if is_prime a then a :: rest else rest;;

	
	let primes max =
  		let rec sieve found toTest =
			match toTest with 
			| [] -> []
    			| h::t -> 	let newPrimes = h :: found
    					and doesntDivide x = (x mod h <> 0) in
    						let nonDivisors = List.filter doesntDivide t in
						if nonDivisors = [] then newPrimes
                          			else sieve newPrimes nonDivisors in

  	let rec range a b =
    		if a > b then []
             	else a :: range (a + 1) b in

  	let p = range 2 max in

  	sieve [] p;;


2)
	type 'a binary_tree =
		|	Empty
		|	Node of 'a * 'a binary_tree * 'a binary_tree;;

	let rec insert tree x = match tree with
		|	Empty
		|	Node(y, l, r) ->
				if x = y then tree
				else	if x < y then Node(y, insert l x, r)
					else Node(y, l, insert r x)

	let construct l = List.fold_left insert Empty l;;


3)
	let lista = [1;2;3;4;5];;

	let rec fold (f, a, l) = 
		match l with
		[] -> a
	|	h::t -> fold (f, (f a h), t)
	;;

	let funkcja =
		fun x y ->
			match x with
				s, c -> (s+y, c*y)
	;;

	fold (funkcja, (0,1), lista);;